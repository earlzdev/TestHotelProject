// Generated by Dagger (https://dagger.dev).
package com.earl.hotel_search.di;

import com.earl.hotel_search.domain.Repository;
import com.earl.hotel_search.presentation.hotelDetails.HotelDetailsFragment;
import com.earl.hotel_search.presentation.hotelDetails.HotelDetailsFragment_MembersInjector;
import com.earl.hotel_search.presentation.hotelDetails.HotelDetailsViewModel;
import com.earl.hotel_search.presentation.hotelDetails.HotelDetailsViewModel_Factory_Factory;
import com.earl.hotel_search.presentation.hotelsSearch.SearchHotelsFragment;
import com.earl.hotel_search.presentation.hotelsSearch.SearchHotelsFragment_MembersInjector;
import com.earl.hotel_search.presentation.hotelsSearch.SearchHotelsViewModel;
import com.earl.hotel_search.presentation.hotelsSearch.SearchHotelsViewModel_Factory_Factory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerSearchHotelsComponent {
  private DaggerSearchHotelsComponent() {
  }

  public static SearchHotelsComponent.Builder builder() {
    return new Builder();
  }

  private static final class Builder implements SearchHotelsComponent.Builder {
    private SearchHotelsDeps searchHotelsDeps;

    @Override
    public Builder deps(SearchHotelsDeps searchAirportsDeps) {
      this.searchHotelsDeps = Preconditions.checkNotNull(searchAirportsDeps);
      return this;
    }

    @Override
    public SearchHotelsComponent build() {
      Preconditions.checkBuilderRequirement(searchHotelsDeps, SearchHotelsDeps.class);
      return new SearchHotelsComponentImpl(searchHotelsDeps);
    }
  }

  private static final class SearchHotelsComponentImpl implements SearchHotelsComponent {
    private final SearchHotelsComponentImpl searchHotelsComponentImpl = this;

    private Provider<Repository> getRepositoryProvider;

    private Provider<SearchHotelsViewModel.Factory> factoryProvider;

    private Provider<HotelDetailsViewModel.Factory> factoryProvider2;

    private SearchHotelsComponentImpl(SearchHotelsDeps searchHotelsDepsParam) {

      initialize(searchHotelsDepsParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SearchHotelsDeps searchHotelsDepsParam) {
      this.getRepositoryProvider = new GetRepositoryProvider(searchHotelsDepsParam);
      this.factoryProvider = DoubleCheck.provider(SearchHotelsViewModel_Factory_Factory.create(getRepositoryProvider));
      this.factoryProvider2 = DoubleCheck.provider(HotelDetailsViewModel_Factory_Factory.create(getRepositoryProvider));
    }

    @Override
    public void inject(SearchHotelsFragment fragment) {
      injectSearchHotelsFragment(fragment);
    }

    @Override
    public void inject(HotelDetailsFragment fragment) {
      injectHotelDetailsFragment(fragment);
    }

    private SearchHotelsFragment injectSearchHotelsFragment(SearchHotelsFragment instance) {
      SearchHotelsFragment_MembersInjector.injectSearchAirportsViewModelFactory(instance, DoubleCheck.lazy(factoryProvider));
      return instance;
    }

    private HotelDetailsFragment injectHotelDetailsFragment(HotelDetailsFragment instance) {
      HotelDetailsFragment_MembersInjector.injectSearchAirportsViewModelFactory(instance, DoubleCheck.lazy(factoryProvider2));
      return instance;
    }

    private static final class GetRepositoryProvider implements Provider<Repository> {
      private final SearchHotelsDeps searchHotelsDeps;

      GetRepositoryProvider(SearchHotelsDeps searchHotelsDeps) {
        this.searchHotelsDeps = searchHotelsDeps;
      }

      @Override
      public Repository get() {
        return Preconditions.checkNotNullFromComponent(searchHotelsDeps.getRepository());
      }
    }
  }
}
